import habitaciones.*

describe "group of tests" {


//*********** OBJETOS PUNTO 1 *************

//una persona de 37 años sin habilidades de cocina (para el ultimo punto del examen es Sencillo) 
	var leo = new Sencilla(edad = 37, habilidadDeCocina = false)

//una persona de 29 anios con habilidades de cocina (para el ultimo punto del examen es Obsesiva)
	var andrea = new Obsesivo(edad = 29, habilidadDeCocina = true)

//una persona de 3 anios sin habilidades de cocina (para el ultimo punto del examen es Golosa)
	var milena = new Goloza(edad = 3, habilidadDeCocina = false)

//una habitacion de uso general
	var comedor = new UsoGeneral()

//un banio	
	var banioPrincipal = new Banio()
	
//un dormitorio cuyos duenios son andrea y leo
	var dormitorioMatrimonial = new Dormitorio(duenios = #{andrea,leo})

//una cocina de 10 metros cuadrados
	var cocinaPlantaBaja = new Cocina(m2 = 10)	

//***********OBJETOS TEST PUNTO 2****************/
	
	
		//Un banio con un ocupante: milena 
		var banioConMenor = new Banio(ocupantes = #{milena})
		
		//Un banio con un ocupante: andrea 
		var banioConMayor = new Banio(ocupantes = #{andrea})

		//un dormitorio con dos ocupantes: ley y andrea. Los duenios son leo y andrea. 
		var dormitorioMatrimonialOcupado = new Dormitorio(duenios = #{andrea,leo}, ocupantes = #{leo,andrea})
		
		//un dormitorio con andrea como ocupante cuyos duenios leo y andrea
		var dormitorioMatrimonialOcupadoConAndrea = new Dormitorio(duenios = #{andrea,leo}, ocupantes = #{andrea})
		
		//un dormitorio con andrea como ocupante, cuya duenia es milena
		var dormitorioMilenaOcupadoConAndrea  = new Dormitorio(duenios = #{milena}, ocupantes = #{andrea})

		//una cocina con andrea como ocupante, 10 de superficie
		var cocinaOcupadaConAndrea = new Cocina(m2 = 10, ocupantes = #{andrea} )

		//una cocina con leo como ocupante, 10 de superficie
		var cocinaOcupadaConLeo  = new Cocina(m2 = 10, ocupantes = #{leo} )
	
	
	
		
//***********OBJETOS TEST PUNTO 3****************/


	//una casa que tiene 4 habitaciones: banioPrincipal , dormitorioMatrimonial, cocinaPlantaBaja, comedor
	var casaFlia = new Casa(habitaciones = #{banioPrincipal , dormitorioMatrimonial, cocinaPlantaBaja, comedor})

	//Una familia cuyos miembros son leo, andrea y milena. La casa es: casaFlia.	
	//Recordar que Leo es sencillo, Andrea obsesiva y Milena golosa
	var familia	= new Familia(miembros = #{leo, andrea,milena}, casa = casaFlia)	
	
	
	

//************TESTS PUNTO 1************

	test "confort uso general" {
		assert.equals(10, comedor.ConfortConHabitante(leo))
		assert.equals(10, comedor.ConfortConHabitante(milena) )
		assert.equals(10, comedor.ConfortConHabitante(andrea) )
		
	}
	
	test "confort banio" {
		assert.equals(14, banioPrincipal.ConfortConHabitante(leo))		
		assert.equals(14, banioPrincipal.ConfortConHabitante(andrea))		
		assert.equals(12, banioPrincipal.ConfortConHabitante(milena))		
	}

	test "confort dormitorio" {
		assert.equals(15, dormitorioMatrimonial.ConfortConHabitante(leo))		
		assert.equals(15, dormitorioMatrimonial.ConfortConHabitante(andrea))		
		assert.equals(10, dormitorioMatrimonial.ConfortConHabitante(milena))		
	}

	test "confort cocina" {
		assert.equals(10, cocinaPlantaBaja.ConfortConHabitante(leo))		
		assert.equals(11, cocinaPlantaBaja.ConfortConHabitante(andrea))		
		assert.equals(10, cocinaPlantaBaja.ConfortConHabitante(milena))		
	
		
		//TODO! reconfigurar para que el porcentaje de la superficie
		//usado para puntos extras sea un 20%
		
		porcentajeDeLasCocinas.tamano(0.2) 
		
		assert.equals(12, cocinaPlantaBaja.ConfortConHabitante(andrea) )		

	}
	
	

//************TESTS PUNTO 2.1************
	
	test "puede entrar habitaciones vacias" {
		
		assert.that( comedor.puedeEntrar(leo))
		assert.that( dormitorioMatrimonial.puedeEntrar(leo))
		assert.that( banioPrincipal.puedeEntrar(leo))
		assert.that( cocinaPlantaBaja.puedeEntrar(leo))
	}
	test "puede entrar banio ocupado" {
		assert.that( banioConMenor.puedeEntrar(leo)/* si en banioConMenor puede entrar leo*/) 
		assert.notThat(banioConMayor.puedeEntrar(leo)/* si en banioConMayor puede entrar leo */)	
	}
	
	test "puede entrar dormitorio" {
		
		assert.that( dormitorioMatrimonialOcupadoConAndrea.puedeEntrar(leo)/* si en dormitorioMatrimonialOcupadoConAndrea puede entrar leo*/) //es duenio
		assert.notThat(dormitorioMatrimonialOcupadoConAndrea.puedeEntrar(milena)/*si en dormitorioMatrimonialOcupadoConAndrea puede entrar milena*/) //faltan duenios
		assert.that(dormitorioMatrimonialOcupado.puedeEntrar(milena)/* si en dormitorioMatrimonialOcupado puede entrar milena */) //estan los duenios
		
	}

	test "puede entrar cocina con alguien que sabe cocinar" {
		assert.that( cocinaOcupadaConAndrea.puedeEntrar(leo)/* si en cocinaOcupadaConAndrea puede entrar leo */)
		
		//HACER QUE leo adquiera habilidades de cocina 
		leo.adquirirHabilidadDeCocina()
		
		assert.notThat(cocinaOcupadaConAndrea.puedeEntrar(leo)/* si en cocinaOcupadaConAndrea.puede entrar leo*/)	
	}

	test "puede entrar cocina con alguien que no sabe cocinar" {
		assert.that(cocinaOcupadaConLeo.puedeEntrar(andrea)/* si en cocinaOcupadaConLeo puede entrar andrea*/)
		assert.that(cocinaOcupadaConLeo.puedeEntrar(milena)/* si en cocinaOcupadaConLeo puede Entrar milena  */)
	}
	
	
//Test punto 2.2 y 2.3

	 

	test "andrea y milena entrando y saliendo de cuartos" {
		
		//TODO: Mezcla ordenes con preguntas	
		// HACER que milena entre a banioPrincipal
		assert.equals(banioPrincipal, milena.CambioHabitacion(banioConMenor,banioPrincipal)/*habitacion donde esta milena */)

		// HACER que andrea entre a dormitorioMatrimonial		
		assert.equals(dormitorioMatrimonial, andrea.CambioHabitacion(banioConMayor,dormitorioMatrimonial)/* habitacion donde esta andrea */)
		
		
 		//HACER que milena entre al dormitorio principal, cosa que no puede porque no es dueña
		
		assert.equals(banioPrincipal, milena.CambioHabitacion(banioPrincipal,dormitorioMatrimonial)/*habitacion donde esta milena */)
		
		
		// HACER que andrea entre a banioPrincipal		
		assert.equals(banioPrincipal, andrea.CambioHabitacion(dormitorioMatrimonial,banioPrincipal) /* habitacion donde esta andrea */)
		
		//TODO: en lugar de pedir la coleccion y hacer contains, corresponde mandar un mensaje a la habitacion
 		assert.notThat(dormitorioMatrimonial.ocupantes().contains(andrea)/* si en dormitorioMatrimonial está andrea*/)		
		
	} 

//************Test punto 3*************
	
	test "habitaciones ocupadas, personas responsables, confort promedio y familia a gusto" {
		leo.entrarHabitacion(dormitorioMatrimonial)
		andrea.entrarHabitacion(cocinaPlantaBaja)
//		//HACER que leo entre a dormitorioMatrimonial
//		//HACER que andrea entre a cocinaPlantaBaja 
//		
//		//punto 3.1
		assert.equals(#{dormitorioMatrimonial,cocinaPlantaBaja}, casaFlia.habitacionesOcupadas()/* habitaciones ocupadas de casaFlia*/)		
//		//punto 3.2
		assert.equals(#{leo,andrea}, casaFlia.responsablesDeLaCasa()/* responsables de casaFlia*/)	
//		//punto 3.3
		assert.equals(47, familia.confortPromedio()/* confort promedio de familia*/)	
//		//punto 3.4
		assert.that( familia.todosAGusto()/* si familia esta a gusto*/)
	}
 



}

